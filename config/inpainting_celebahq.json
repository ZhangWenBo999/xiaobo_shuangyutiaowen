{
    "name": "inpainting_celebahq", // experiments name
    "gpu_ids": [0], // gpu ids list, default is single 0
    "seed" : -1, // random seed, seed <0 represents randomization not used 
    "finetune_norm": false, // find the parameters to optimize

    "path": { //set every part file path
        "base_dir": "experiments", // base path for all log except resume_state
        "code": "code", // code backup
        "tb_logger": "tb_logger", // path of tensorboard logger
        "results": "results",
        "checkpoint": "checkpoint",
//        "resume_state": "experiments/train_inpainting_celebahq_240626_103929/checkpoint/best/2"
        "resume_state": null // ex: 100, loading .state  and .pth from given epoch and iteration
    },

    "datasets": { // train or test
        "train": { 
            "which_dataset": {  // import designated dataset using arguments 
                "name": ["data.dataset", "InpaintDataset"], // import Dataset() class / function(not recommend) from data.dataset.py (default is [data.dataset.py])
                "args":{ // arguments to initialize dataset
                    // train_giga
                    "data_root": "/kaggle/input/256-1000/datasets/celebahq_flist/flist/train_shuffled_giga_1000.flist",
                    // train_local_test_giga
//                    "data_root": "datasets/celebahq_flist/flist/train_shuffled_local_test.flist",

                    "data_len": -1,
                    "mask_config": {
                        "mask_mode": "hybrid",
                        "phase": "train",
                        "m12_mode": "mask_generation/lama_generation/random_thin_256.yaml"
                    }
                } 
            },
            "dataloader":{
                "validation_split": 4, // percent or number
                "args":{ // arguments to initialize train_dataloader
                    "batch_size": 4, // batch size in each gpu
                    "num_workers": 10,
                    "shuffle": true,
                    "pin_memory": true,
                    "drop_last": true
                },
                "val_args":{ // arguments to initialize valid_dataloader, will overwrite the parameters in train_dataloader
                    "batch_size": 2, // batch size in each gpu
                    "num_workers": 10,
                    "shuffle": false,
                    "pin_memory": true,
                    "drop_last": false
                }
            }
        },
        "test": { 
            "which_dataset": {
                "name": "InpaintDataset", // import Dataset() class / function(not recommend) from default file
                "args":{
                    // test_giga
                    "data_root": "datasets/celebahq_flist/flist/visual_test_shuffled_giga.flist",
                    // test_local_test
//                    "data_root": "datasets/celebahq_flist/flist/visual_test_shuffled_local_test.flist",
                    "mask_config": {
//                        "mask_mode": "center",
                        "mask_mode": "ThinStrokes",
                        "phase": "test"
                    }
                }
            },
            "dataloader":{
                "args":{
                    "batch_size": 5,
                    "num_workers": 12,
                    "pin_memory": true
                }
            }
        }
    },

    "model": { // networks/metrics/losses/optimizers/lr_schedulers is a list and model is a dict
        "which_model": { // import designated  model(trainer) using arguments 
            "name": ["models.model", "Palette"], // import Model() class / function(not recommend) from models.model.py (default is [models.model.py])
            "args": {
                "sample_num": 8, // process of each image
                "task": "inpainting",
                "ema_scheduler": {
                    "ema_start": 1,
                    "ema_iter": 1,
                    "ema_decay": 0.9999
                },
                "optimizers": [
                    { "lr": 5e-5, "weight_decay": 0}
                ]
            }
        }, 
        "which_networks": [ // import designated list of networks using arguments
            {
                "name": ["models.network", "Network"], // import Network() class / function(not recommend) from default file (default is [models/network.py]) 
                "args": { // arguments to initialize network
                    "init_type": "kaiming", // method can be [normal | xavier| xavier_uniform | kaiming | orthogonal], default is kaiming
                    "module_name": "guided_diffusion", // sr3 | guided_diffusion
                    "unet": {
                        "in_channel": 6,
                        "out_channel": 3,
                        "inner_channel": 64,
                        "channel_mults": [
                            1,
                            2,
                            4,
                            8
                        ],
                        "attn_res": [
                            // 32,
                            16
                            // 8
                        ],
                        "num_head_channels": 32,
                        "res_blocks": 2,
                        "dropout": 0.2,
                        "image_size": 256
                    },
                    "beta_schedule": {
                        "train": {
                            "schedule": "linear",
                            "n_timestep": 2000,
                            // "n_timestep": 10, // debug
                            "linear_start": 1e-6,
                            "linear_end": 0.01
                        },
                        "test": {
                            "schedule": "linear",
                            "n_timestep": 1000,
                            "linear_start": 1e-4,
                            "linear_end": 0.09
                        }
                    }
                }
            }
        ],
        "which_losses": [ // import designated list of losses without arguments
            "mse_loss" // import mse_loss() function/class from default file (default is [models/losses.py]), equivalent to { "name": "mse_loss", "args":{}}
        ],
        "which_metrics": [ // import designated list of metrics without arguments
            "mae" // import mae() function/class from default file (default is [models/metrics.py]), equivalent to { "name": "mae", "args":{}}
        ]
    },

    "train": { // arguments for basic training
        "n_epoch": 200, // max epochs, not limited now
        "n_iter": 1e8, // max interations
        "val_epoch": 1, // valdation every specified number of epochs
        "save_checkpoint_epoch": 1,
        "log_iter": 1e3, // log every specified number of iterations
        "tensorboard" : true,  // tensorboardX enable
        "min_val_mae_loss": 1e3, // 记录验证阶段最小的mae值，便于选择最好的权重文件
//        "min_val_mae_loss": 0.1820216327905655, // 记录验证阶段最小的mae值，便于选择最好的权重文件
        "min_val_flag": false, // 最好权重文件的标志位
        "train_previous": [], // 保存之前的训练损失，便于自动生成训练损失曲线
        "eval_previous": []   // 保存之前的验证损失，便于自动生成验证损失曲线
//        "train_previous": [1.2148903674549525, 0.65961221853892, 0.5289479808674918, 0.5209470060136584, 0.5719142357508341, 0.5036077151695887, 0.4427877581781811, 0.4286843554841147], // 保存之前的训练损失，便于自动生成训练损失曲线
//        "eval_previous": [0.2197141945362091, 0.1820216327905655, 0.1827697455883026, 0.18691465258598328, 0.19094650447368622, 0.19108915328979492, 0.19059845805168152, 0.1901702582836151]   // 保存之前的验证损失，便于自动生成验证损失曲线
    },
    
    "debug": { // arguments in debug mode, which will replace arguments in train
        "val_epoch": 1,
        "save_checkpoint_epoch": 1,
        "log_iter": 2,
        "debug_split": 50 // percent or number, change the size of dataloder to debug_split.
    }
}
